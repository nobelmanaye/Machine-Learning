import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from mlxtend.plotting import scatterplotmatrix, heatmap
from sklearn.preprocessing import StandardScaler
from eda import training
class LinearRegressionGD(object):

      def __init__(self, eta=0.001, n_iter=20):
         
        self.eta = eta
        self.w_ = []
      def fit(self, X, y):
        meanx = sum(X)/len(X)
        meany = sum(y)/len(y)

        upper = 0
        lower = 0
        for i in range(len(X)):

            upper += ((X[i]-meanx)(y[i]-meany))
            lower += (((X[i]-meanx)))^2


        beta = upper/lower
        alpha = meany-(meanx)*(alpha)

        self.w_.append(alpha)
        self.w_.append(beta)



      def net_input(self, X):        
         pass
    
      def predict(self, X):
         pass



            



# X = df[['RM']].values
# y = df['MEDV'].values
# sc_x = StandardScaler()
# sc_y = StandardScaler()
# X_std = sc_x.fit_transform(X)
# y_std = sc_y.fit_transform(y[:, np.newaxis]).flatten()
# lr = LinearRegressionGD()

# lr.fit(X_std, y_std)
# #print('Slope: %.3f' % lr.w_[1])
# #print('Intercept: %.3f' % lr.w_[0])

# md=df['MEDV'].values
# print(md.size)